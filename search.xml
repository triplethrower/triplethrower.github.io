<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo博客新版next主题搭建</title>
    <url>/2020/02/26/hexo-bo-ke-xin-ban-next-zhu-ti-da-jian/</url>
    <content><![CDATA[<p>说实话，我其实本来不想写这篇文章的。</p>
<p>网上hexo博客的搭建教程很多，而且大多数方法其实都差不多。</p>
<p>然后在某一天，我的next主题突然炸了（font-awesome死了），我去github一看，发现原理是next主题出新的版本了（v7.7.1），并放弃了对旧版（v6.7.0）的维护。</p>
<a id="more"></a>
<p>如果只是这样问题不大，只要重新配置一下主题就行。</p>
<p>关键是我搞着搞着发现新版的主题并没有我想象的那么好配置。</p>
<p>原来的配置方法基本上都失效了，而且各种文件的配置方法都出现了多多少少的改动。</p>
<p>最难受的是，网上的一些配置next主题的文章都停留于旧版主题，一切只能靠自己的经验和代码直觉。</p>
<p>经历千辛万苦后终于配置完博客的我，有了写一篇文章的想法。</p>
<p>我会在这篇文章来详细地介绍如何配置新版next主题，并会将其与老版主题做比较。</p>
<h3 id="搭建博客（基础内容）"><a href="#搭建博客（基础内容）" class="headerlink" title="搭建博客（基础内容）"></a>搭建博客（基础内容）</h3><p>这个地方我是不会讲的，因为网上的文章太多，总感觉自己在抄袭。</p>
<p>我这里推荐<a href="https://venusnero.github.io/2019/01/23/build_hexo_github_blog/" target="_blank" rel="noopener">Venus大佬的博客</a></p>
<p>他的文章介绍得比较详细，而且里面基本上没有什么坑。</p>
<p>到时候先跳过主题那一部分即可。</p>
<h3 id="新版next主题配置"><a href="#新版next主题配置" class="headerlink" title="新版next主题配置"></a>新版next主题配置</h3><p>萌新和偶遇经验的人都可以无门槛地进行配置。</p>
<p>对于最终效果有疑问的人可以参考着本博客来搭建。</p>
<p>首先，我们要导入主题。</p>
<p>我们在cmd中cd到博客目录之后输入<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure><br>等加载条加载完之后我们就可以使用主题了。</p>
<p>然后我们打开博客的_config.yml，在theme那里把landscape改成next</p>
<p>现在，如果你在cmd输入hexo s，在浏览器输入localhost:4000的话，你会发现你的博客变成next了（虽然现在有点丑了就是）。</p>
<p>我们在博客配置里找到subtitle、description和author的栏目，这分别对应着博客的副标题、作者的说明（相当于个性签名了吧）和作者名字。这些可以凭个人喜好修改。</p>
<p>我们在language把en修改成zh-CN。</p>
]]></content>
      <tags>
        <tag>教程</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>APEX入坑指导</title>
    <url>/2020/02/25/APEX-ru-keng-zhi-dao/</url>
    <content><![CDATA[<p>“我已经花98块钱买了绝地求生，我不会再玩一个新的大逃杀游戏“</p>
<p>——Fractures 于2019.7月</p>
<p>不得不说，人这一辈子，谁都会真香几次。</p>
<p>七月份，我正好买到了新的笔记本。在玩绝地求生的同时，我偶然间了解了APEX英雄，然后便一发不可收拾，往这个坑越跳越深。</p>
<a id="more"></a>
<h3 id="APEX简介"><a href="#APEX简介" class="headerlink" title="APEX简介"></a>APEX简介</h3><p><img src="https://minyuchengmin.github.io/therspist/APEX.png" alt="APEX游戏界面"></p>
<p>APEX英雄是一个免费大逃杀游戏，拥有一个大逃杀打游戏的基本元素————开局跳伞，落地捡装备，缩小的毒圈等。</p>
<p>而作为一个大火的游戏，APEX也是独具一格。</p>
<p>其最大的特色就是游戏中的人物拥有独特的技能，就像守望先锋一样。每个人物有三个技能一个被动，一个主技能和一个大招。</p>
<p>每个小队是三人小队（有别于传统吃鸡游戏的四人小队），地图中还有各种别具一格的游戏特色，需要自己探索。</p>
<p>APEX英雄总是会给我带来各种惊喜，相信只要喜欢射击游戏的人应该会喜欢APEX。</p>
<p>那么，说完APEX的特色，我们就开始下载它吧。</p>
<h3 id="APEX下载"><a href="#APEX下载" class="headerlink" title="APEX下载"></a>APEX下载</h3><p>“如果APEX英雄在Steam平台上多好。”</p>
<p>这句话属实说出了千万玩家的心声。只可惜，由RESPAWN团队创造出的APEX被发布在了EA的origin平台上，也就是我们众所周知的烂橘子平台。</p>
<p>也是因为这个原因，APEX下载更新慢，延迟高，而且有时候还会出各种各样的问题，让广大玩家苦不堪言。</p>
<p>origin平台距离大陆最近的两台服务器实在香港和台湾，所以除非所在的地方离这两个地方很近，我还是强烈建议在下载和游玩游戏之前买一个加速器。</p>
<p>现在公认的最稳定的加速器是网易的uu加速器，不过uu加速器的价格偏高，我用的加速器是迅龙加速器，虽然稳定方面没有uu加速器那么出色，但是性价比比较高，而且还提供暂停加速功能，当然，稳定性还是比较可以的。</p>
<p>APEX的画质很高，但是对电脑配置的要求却并没有绝地求生那么严格。</p>
<p><img src="https://minyuchengmin.github.io/therspist/hardware.png" alt="最低配置需求"></p>
<p>上图是玩APEX的最低配置需求，不过要是想在最低画质设置下流畅地玩耍的话肯定要是在上图的配置之上了。</p>
<p>本博主的电脑配置：</p>
<p>处理器：Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz 2.59 GHz</p>
<p>运行内存：8GB</p>
<p>系统：windows10 64位家庭版</p>
<p>显卡：英伟达GTX1650独显</p>
<p>好了，说了那么多，是不是忍不住马上下载游玩了？我们首先在<a href="https://www.origin.com/hkg/zh-tw/" target="_blank" rel="noopener">origin官网</a>下载橘子平台。</p>
<h5 id="啊对，有几个事情要提醒一下。首先，橘子平台没有简体中文，只有繁体中文。第二，如果你已经下载并购买了加速器，那么我强烈建议你先启动加速器并对APEX进行加速然后再开始安装橘子平台。"><a href="#啊对，有几个事情要提醒一下。首先，橘子平台没有简体中文，只有繁体中文。第二，如果你已经下载并购买了加速器，那么我强烈建议你先启动加速器并对APEX进行加速然后再开始安装橘子平台。" class="headerlink" title="啊对，有几个事情要提醒一下。首先，橘子平台没有简体中文，只有繁体中文。第二，如果你已经下载并购买了加速器，那么我强烈建议你先启动加速器并对APEX进行加速然后再开始安装橘子平台。"></a>啊对，有几个事情要提醒一下。首先，橘子平台没有简体中文，只有繁体中文。第二，如果你已经下载并购买了加速器，那么我强烈建议你先启动加速器并对APEX进行加速然后再开始安装橘子平台。</h5><p>当橘子平台下载完之后，我们可以注册一下，然后在商店中找到APEX英雄，选择语言（有简体中文，不过中文的声优嗓音贼难听，英语不错的人可以选择英文），然后下载就可以了。</p>
<p>什么？你要把它下载到机械硬盘里？想每一局都落地成盒吗？固态硬盘不就是用来下游戏的嘛（滑稽）</p>
<p>下载的时候依旧推荐开着加速器下载。不开加速器平均速度在300kb/s，而我曾经开加速器下载速度竟然创造了17mb/s的奇迹。</p>
<p>在下载到43%（应该是，上面有显示）的时候就可以开始游玩，后面的东西都是一些高清材质包，边玩边下载问题不大。</p>
<p>我们就开始进行对APEX英雄的基础设置吧。</p>
<h3 id="APEX设置"><a href="#APEX设置" class="headerlink" title="APEX设置"></a>APEX设置</h3><p>APEX肯定需要独显的支持，对于英伟达显卡，我们要在桌面上右键，选择NVIDIA控制面板，在左侧菜单栏选择管理3D设置，选择程序设置，点击添加，在浏览中，进入APEX的下载目录中找到r5apex.exe，进行添加。</p>
<p>然后在首选处理器中选择高性能NVIDIA处理器。这样，我们就把APEX设置成独显中运行了（如下图）。</p>
<p><img src="https://minyuchengmin.github.io/therspist/NVIDIA.png" alt=""></p>
<p>我们现在进入游戏即可，注意游戏的反外挂程序可能和杀毒软件冲突，所以在进入游戏之前建议关掉腾讯管家、360等软件。</p>
<p>一进游戏会播放很帅气的宣传片，自从第二赛季开始每一季都会有很帅气的宣传片，有兴趣的可以去看看。</p>
<p>进入游戏后先不要着急进入新手教程。我们首先打开设置，在视频设置中，我们可以根据自己的电脑配置二进行调整。</p>
<p>我的显卡是GTX1650，相当于GTX1070的性能。</p>
<p>我的设置是禁用垂直同步，开启抗锯齿，纹理串流预算在3GB VRAM（这个是要看显卡的显存了，我的显存是4GB，于是设置成了3GB VRAM），纹理过滤是各向异性4x，剩下的设置对显卡的影响并不是很大，于是均设置在中或低。</p>
<p>当然，我的视频设置比较保守，而显卡比较垃圾的人可以把纹理串流预算和纹理过滤调低一点。</p>
<h3 id="APEX游玩"><a href="#APEX游玩" class="headerlink" title="APEX游玩"></a>APEX游玩</h3><p>激动人心的时刻终于到了，我们先进入新手训练熟悉一下各种按键和操作方式，以及各种枪。</p>
<p>小提示：在APEX中移动射击是不会改变子弹弹道的，而且边移动边射击有利于更好的控制压枪走向。</p>
<p>游戏的大体方式跟绝地求生差不多，大体应该都能摸索过来qwq~</p>
<p>每一个英雄的能力不同，你可以在英雄界面右键查看能力。</p>
<p>对于新手来说，推荐班加罗尔、生命线、直布罗陀和寻血犬。</p>
<p>每一个物品（除枪、子弹和投掷物外）都有白、蓝、紫、金的颜色之分，金色物品最稀有，白色物品最常见（跟某些卡牌手游差不多）。</p>
<p>因为拥有护甲，所以敌人的血量可能远比你想象的要多，要谨慎出手。</p>
<p>APEX的最大特点之一：当你死后你的队友可以复活你。是的，如果你变成盒子时候队友捡起你的旗帜，那么ta就可以到最近的复活台复活你（当然，你的装备还在你的盒子里）。</p>
<p>金色的枪只能在空投中捡到，而且金枪的子弹并不能在地图中捡到。</p>
<p>因为有滑行、飞行塔（类似于气球的东西）的存在，每个玩家近战的情况远比打狙击战的情况多，所以在APEX中喷子的用处很大。</p>
<p>APEX英雄的各种枪平衡性很强，没有什么类型的枪是废枪（甚至连三个手枪中的两个都是快速连发的，第三个手枪是一发46伤害的神器）。</p>
<p>如果你没有对自己枪法的绝对自信，那么请不要使用莫比兰克。</p>
<h3 id="你以为本博客就这么结束了？没有！可以说现在才是本文章的大头"><a href="#你以为本博客就这么结束了？没有！可以说现在才是本文章的大头" class="headerlink" title="你以为本博客就这么结束了？没有！可以说现在才是本文章的大头"></a>你以为本博客就这么结束了？没有！可以说现在才是本文章的大头</h3><p>我玩着玩着游戏就会莫名闪退、崩溃，经过一段时间后我只要晚上一局就会闪退一局。</p>
<p>网上给我的方法总是不尽人意，并没有解决方法。</p>
<p>某一天，被游戏闪退气疯的我直接来了一次10小时高强度问题排查，之后游戏再也没有出现过闪退的现象了。</p>
<p>我的大部分方法都来自EA的<a href="https://answers.ea.com/t5/Technical-Issues/Community-Crashing-Troubleshooting-Guide/td-p/7447308" target="_blank" rel="noopener">APEX官方疑难解答</a>,里面有针对电脑、ps4和xbox的各种闪退和崩坏的建议，英语好的人可以在这里尝试一下。</p>
<p>不过我在这里提供一下对我电脑管用的一部分方法。</p>
<ul>
<li><p>关闭与eac（反外挂程序）冲突的软件，如电脑管家等</p>
</li>
<li><p>把中文输入法切换成系统自带的纯英文输入法</p>
</li>
<li><p>调低视频设置</p>
</li>
<li><p>更新显卡驱动</p>
</li>
<li><p>不要让NVIDIA GeForce对游戏进行优化，因为它对你的显卡性能一点B数都没有</p>
</li>
<li><p>设置虚拟内存，你的游戏在哪个磁盘，就在哪里设置虚拟内存，具体方法去百度，不要相信网上的1.5-2倍说法，直接设置成最小15000MB，最大20000MB，要不然根本不够用</p>
</li>
<li><p>将eac的优先级调成低，具体方法：在开启游戏后打开任务管理器，在详细信息中找到easy anti-cheat的程序（或者你找到一个蓝色的小熊图标），右键选择，设置优先级为低</p>
</li>
<li><p>在防火墙中把APEX和橘子平台都设置成信任</p>
</li>
<li><p>在橘子平台的游戏库里右键APEX英雄选择修复</p>
</li>
<li><p>在游戏库里右键APEX英雄，在属性中关闭在游戏中启用origin</p>
</li>
</ul>
<p>经过这些方法之后，我的闪退问题解决了，如果还有疑问的话可以私聊我（我的QQ号在博客的“关于”中有显示）</p>
<p>我的入坑指导就到这了，有时间一起开黑啊~</p>
]]></content>
      <tags>
        <tag>教程</tag>
        <tag>颓废</tag>
      </tags>
  </entry>
  <entry>
    <title>一名oier的浏览器使用方式</title>
    <url>/2019/09/15/yi-ming-oier-de-liu-lan-qi-shi-yong-fang-shi/</url>
    <content><![CDATA[<h1 id="你是不是有时候好奇一些大佬们怎么在短时间内下载超大文件？你是不是好奇一些大佬们怎么访问谷歌和一些需要科学上网的网站？如果是，那么就来看看这篇博客吧！"><a href="#你是不是有时候好奇一些大佬们怎么在短时间内下载超大文件？你是不是好奇一些大佬们怎么访问谷歌和一些需要科学上网的网站？如果是，那么就来看看这篇博客吧！" class="headerlink" title="你是不是有时候好奇一些大佬们怎么在短时间内下载超大文件？你是不是好奇一些大佬们怎么访问谷歌和一些需要科学上网的网站？如果是，那么就来看看这篇博客吧！"></a>你是不是有时候好奇一些大佬们怎么在短时间内下载超大文件？你是不是好奇一些大佬们怎么访问谷歌和一些需要科学上网的网站？如果是，那么就来看看这篇博客吧！</h1><a id="more"></a>
<p>在这里我使用的是chrome谷歌浏览器</p>
<h2 id="关于下载"><a href="#关于下载" class="headerlink" title="关于下载"></a>关于下载</h2><p>当你想下载一个电影或者是一个镜像文件时，你是不是因为50kb/s的龟速下载而差点疯掉？我们来讲几种提高下载速度的几种方法吧</p>
<p>1.打开平行下载</p>
<p>我们在网址框里面输入chrome://flags，然后搜索parallel downloading。选择enabled，在重启浏览器之后会发现下载速度会快很多</p>
<p>2.使用IDM下载。</p>
<p>IDM（Internet Download Manager）是一个非常强大的浏览器下载软件（插件）。它可以爬取网站，而且还可以自定义下载。它使用类似分治的算法来下载，平常下载速度可达5mb/s。我们在<a href="http://www.internetdownloadmanager.com/download.html" target="_blank" rel="noopener">这里</a>点击下载。</p>
<p>下载之后我们输入chrome://extensions打开浏览器的扩展程序，将IDM打开就可以了。</p>
<p>因为IDM非常强大，所以我们只能使用30天。幸运的是，我已经找到了破解补丁。打开<a href="https://github.com/minyuchengmin/IDM-hackdown" target="_blank" rel="noopener">我的项目</a>选择下载zip文件，解压缩之后打开IDM破解补丁，再进行破解就可以了。</p>
<p>这个时候我们打开下载网页时它会自动提示你下载，如果没有的话我们也可以右键点击下载链接选择IDM下载。</p>
<h2 id="关于科学（fan）上网（qiang）"><a href="#关于科学（fan）上网（qiang）" class="headerlink" title="关于科学（fan）上网（qiang）"></a>关于科学（fan）上网（qiang）</h2><p>众所周知，由于各种<del>政治</del>等因素，我们并不能访问谷歌等网站。下面来讲一下科学上网的办法。</p>
<p>1.如果只是访问谷歌相关网页的话我们可以下载谷歌访问助手插件。</p>
<p>这里我还是给大家列举了<a href="https://github.com/haotian-wang/google-access-helper" target="_blank" rel="noopener">破解版</a>（不是破解版的会限时）。下载zip，解压缩之后，我们打开浏览器的扩展程序，点开右上角的开发者模式，加载已解压的扩展程序，选择刚才下载的文件（注：一定要打开直到看见子目录为止，要不然会加载失败），然后我们就可以访问谷歌相关网站了（支持访问google，gmail，浏览器应用商店，不支持访问youtube）</p>
<p>2.使用梯子</p>
<p>大家应该对Vpn（简称梯子）这种东西不陌生吧。这里给大家推荐一个<a href="https://raw.githubusercontent.com/getlantern/lantern-binaries/master/lantern-installer.exe" target="_blank" rel="noopener">梯子</a>，下载之后打开使用就可以了。</p>
<p>注：因为最近中国开始封禁部分梯子，所以有几率会连接失败</p>
<p>3.使用ssr</p>
<p>可能一部分人了解ssr，简单来说是通过部署国外服务器来进行科学上网。而且，还可以通过服务器搭建网站、博客、网盘等一系列神仙的操作（所以要花钱）。有兴趣的人可以自行谷歌（百度肯定没有啊），这里因为涉及太多我就不进行详细的说明了。</p>
<p>文章到这里就结束了，有问题的人可以在右下角私聊我~</p>
]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>deepin linux安装笔记</title>
    <url>/2019/09/13/deepin-linux-an-zhuang-bi-ji/</url>
    <content><![CDATA[<p>前几天我的电脑装arch linux系统的时候装崩了，于是去修电脑的地方装了一个盗版的win10系统，结果不管干什么都非常不方便，于是有了再装一个新的双系统的的想法。</p>
<a id="more"></a>
<p>在那时候我的电脑很垃圾，并不能承受很大的系统。manjaro的xfce桌面太难看，而它的kde又太占资源，至于arch linux我是不敢装了，所以自然而然我就想到了deepin.</p>
<p>Deepin是一个强大的linux系统，具有丰富的软件资源，而且只需要2g的内存就能完美运行。Deepin的桌面也很美观，大体来说是这个样：</p>
<p><img src="https://minyuchengmin.github.io/therspist/deepin.png" alt=""></p>
<p>是不是很好看啊</p>
<p>deepin的下载在<a href="https://www.deepin.org/download/" target="_blank" rel="noopener">这里</a></p>
<p>可以看到有很多镜像源，而我推荐使用osdn下载（比较快），如果大家直接用浏览器下载的话会很慢，建议先在手机上下载然后再传到电脑上（快很多），如果没有那就可以用IDM下载（一个浏览器插件）。</p>
<p>下载之后我们可以右键iso文件，然后点击装载。这时候我们应该会看到如下图的一个程序<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/di507wee.png" alt=""><br>deepin其实可以不用u盘直接安装的（用上图程序），但是好像这里有一个锅，就是可能无法识别磁盘<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/3caob83r.png" alt=""><br>所以我们就只能usb安装了</p>
<p>首先说一下注意事项：</p>
<p>第一，我们选择装deepin的分区绝对不能是windows系统所在的分区（切记！！！）因为deepin会把整个分区都格式化掉，所以一定不能装在系统盘里面（也就是C盘）。</p>
<p>第二，在第一条里说过，deepin会格式化整个分区，所以提前备份好那个分区里的文件。</p>
<p>第三，多给deepin留空间。这里说的留空间是指给装deepin的分区多留一些储存空间。因为安装deepin后这个分区会格式化成ext4格式，而windows并不支持ext4格式的分区。在deepin系统可以访问到其他分区的文件（默认为NTFS），但是，也只能局限于读取文件，并不能更改文件。所以，deepin的程序和文件只能在deepin系统所在的分区里面储存。在安装deepin之前，你还是多给它分几个G吧（推荐给它分70GB）。</p>
<p>（什么？你不会给电脑分区？那就来看看<a href="https://jingyan.baidu.com/article/f25ef254bb84b7482c1b82b1.html" target="_blank" rel="noopener">这篇文章</a>吧）</p>
<p>第四，也是最重要的，一定要关掉bitlocker！！bitlocker是一个保护磁盘不被非法程序篡改数据的保护应用，然而我们再装deepin的时候bitlocker会将安装程序认定为非法程序，然后等你安装完系统之后打开windows系统你会惊奇的发现你的磁盘被加密锁住了。如果你是microsoft账号登录电脑的话你可以通过官网找到解密密码，但是如果你是本地账户的话你只能把电脑恢复出厂设置了（非常悲催），而且bitlocker本身就是一个没有任何实用性的东西，所以请你一定关掉bitlocker。如果打开此电脑，发现各个磁盘都旁边都有一个小锁标志的话就代表打开bitlocker了。可以在设置里面搜索bitlocker选择关闭。</p>
<p>我们到网上下载usbwriter<a href="https://sourceforge.net/projects/usbwriter/" target="_blank" rel="noopener">点这里</a></p>
<p>然后再将文件解压缩，打开程序，将u盘插入电脑，选择镜像读入就行了</p>
<p>然后我们再重启电脑，这时候我们要狂按F12（个别电脑可能不太一样），选择usb启动，这时候我们就会发现我们进入了安装界面。</p>
<p>有些人可能出现了跟直接安装同样的问题：无法识别硬盘，这时候我们要重启电脑，狂点F2，进入BIOS界面。<br>我们点开configuration（个别电脑是system configuration），将硬盘启动方式换一下就可以了（这里我没法放图，因为我现在的电脑是戴尔的，而戴尔的BIOS界面跟一般电脑不太一样，不过如果你看到一个选项中有叫做SATA的选项那就是硬盘启动方式的选项了，选跟目前默认选项不一样的就可以了）</p>
<p>因为电脑差别的原因无法准确地描述出来，如果还是不懂的话可以私信我（或者是百度）</p>
<p>网上还有一个办法说先下载<a href="http://www.diskgenius.cn/download.php" target="_blank" rel="noopener">diskgenius</a>,然后再打开程序将给deepin分区格式化成ext4格式，然后就可以识别到了</p>
<p>如果前面问题都解决了那么我们就可以静等系统安装好了</p>
<p>值得一提的是：deepin安装之后自带引导程序（而且可以个性化），UEFI启动的同学可以不用担心</p>
<p>系统安装好之后，就可以尽情地<del>玩耍</del>使用了</p>
<h3 id="deepin入门-amp-进阶"><a href="#deepin入门-amp-进阶" class="headerlink" title="deepin入门&amp;进阶"></a>deepin入门&amp;进阶</h3><p>对于联想的电脑来说，可能进入系统后会发现无法联网，这个时候我们在桌面右键打开终端，输入这个代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo modprobe -r ideapad_laptop</span><br></pre></td></tr></table></figure><br>这样我们就可以联网了</p>
<p>但是，这样的话我们每次开机的事后都需要输入这个代码，于是，我们打开/etc/modprobe.d，新建一个ideapad.conf文件，在里面输入<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">blacklist ideapad_laptop</span><br></pre></td></tr></table></figure><br>就可以啦</p>
<p>进入deepin系统之后，我们就可以打开深度商店安装软件了（deepin好处之一）</p>
<p>想安装qq的同学还是建议下载tim（qq还是2018年的远古版）</p>
<p>腾讯软件对linux的兼容极差，所以这里并没有qq音乐等软件</p>
<p>当下好软件之后，可能使用的并不是最新版，所以我们要在桌面右键打开终端，写入以下两行代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><br><strong>注：输入密码的时候不会显示密码</strong></p>
<p>在chrome和vscode等软件你会发现在窗口的最上方有一大片丑陋的空白，我们可以在软件自身的设置里面关掉</p>
<p>使用一段时间的deepin后会发现我们的电脑用一段时间就会变得非常烫，这是因为电脑插上电源就会默认以最大性能运转，解决方法是开省电模式或者拔下电源</p>
<p>因为deepin没有devc++，但是它又自带gcc，所以我们可以下载vscode来写代码（在windows使用vscode的同学会知道那种安装gcc时的痛苦）</p>
<p>我们首先在终端中输入一行代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br></pre></td></tr></table></figure><br>然后下载vscode，打开，下载几个插件：</p>
<ul>
<li><p>C/C++</p>
</li>
<li><p>Code Runner </p>
</li>
<li><p>C/C++ Clang Command Adapter</p>
</li>
<li><p>Include Autocomplete</p>
</li>
<li><p>C/C++ Snippets</p>
</li>
<li><p>Bracket Pair Colorizer</p>
</li>
<li><p>One Dark Pro</p>
</li>
<li><p>GBKtoUTF8</p>
</li>
</ul>
<p>建议大家再下载中文包（搜索chinese即可找到）</p>
<p>先创建一个文件随便写点东西（<del>hello world</del>）</p>
<p>然后按快捷键ctrl + shift + D，点击设置图标，弹出的选择中选C++（GDB/LLDB）</p>
<p>在生成的launch.json文件中，把里面的内容删了，再把下面的代码复制进去<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 使用 IntelliSense 了解相关属性。 </span><br><span class="line">    &#x2F;&#x2F; 悬停以查看现有属性的描述。</span><br><span class="line">    &#x2F;&#x2F; 欲了解更多信息，请访问: https:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?linkid&#x3D;830387</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;(gdb) Launch&quot;,                                 &#x2F;&#x2F;配置名称，会在启动配置的下拉菜单中显示</span><br><span class="line">            &quot;type&quot;: &quot;cppdbg&quot;,                                       &#x2F;&#x2F;配置类型，只能为cppdbg</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,                                    &#x2F;&#x2F;请求类型，可以为launch或attach</span><br><span class="line">            &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;&#x2F;a.out&quot;,             &#x2F;&#x2F;将要调试的程序的路径</span><br><span class="line">            &quot;args&quot;: [],                                             &#x2F;&#x2F;调试时传递给程序的命令行参数</span><br><span class="line">            &quot;stopAtEntry&quot;: false,                                   &#x2F;&#x2F;设为true程序会暂停在入口处</span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,                            &#x2F;&#x2F;调试程序时的工作目录</span><br><span class="line">            &quot;environment&quot;: [],                                      &#x2F;&#x2F;环境变量</span><br><span class="line">            &quot;externalConsole&quot;: false,                               </span><br><span class="line">            &quot;MIMode&quot;: &quot;gdb&quot;,                                        </span><br><span class="line">            &quot;miDebuggerPath&quot;: &quot;&#x2F;usr&#x2F;bin&#x2F;gdb&quot;,                       </span><br><span class="line">            &quot;setupCommands&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,</span><br><span class="line">                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,</span><br><span class="line">                    &quot;ignoreFailures&quot;: true</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;preLaunchTask&quot;: &quot;build&quot;                               </span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>然后按F5调试，此时弹出一个信息框，选配置任务，选择后点击Others，跳出tasks.json</p>
<p>同理，将里面的内容删除，再复制进下面的代码<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; See https:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkId&#x3D;733558</span><br><span class="line">    &#x2F;&#x2F; for the documentation about the tasks.json format</span><br><span class="line">    &quot;version&quot;: &quot;2.0.0&quot;,</span><br><span class="line">    &quot;tasks&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;label&quot;: &quot;build&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;shell&quot;,</span><br><span class="line">            &quot;command&quot;: &quot;g++&quot;,</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;$&#123;file&#125;&quot;,</span><br><span class="line">                &quot;-o&quot;,</span><br><span class="line">                &quot;$&#123;workspaceRoot&#125;&#x2F;a.out&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;group&quot;: &#123;</span><br><span class="line">                &quot;kind&quot;: &quot;build&quot;,</span><br><span class="line">                &quot;isDefault&quot;: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们这时再打开终端，输入以下代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install clang</span><br></pre></td></tr></table></figure><br>最后，我们再打开文件-首选项-设置，点开右上角的代码按钮，打开settings.json，删除原内容，再复制进以下代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;files.associations&quot;: &#123;</span><br><span class="line">        &quot;iostream&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;ostream&quot;: &quot;cpp&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F;&quot;files.defaultLanguage&quot;: &quot;cpp&quot;, &#x2F;&#x2F; ctrl+N新建文件后默认的语言</span><br><span class="line"> </span><br><span class="line">    &quot;code-runner.runInTerminal&quot;: true, &#x2F;&#x2F; 设置成false会在“输出”中输出，无法交互</span><br><span class="line">    &quot;code-runner.executorMap&quot;: &#123;</span><br><span class="line">        &#x2F;&#x2F;&quot;c&quot;: &quot;cd $dir &amp;&amp; clang $fileName -o $fileNameWithoutExt.out -g -Wall -static-libgcc -fcolor-diagnostics -std&#x3D;c11 &amp;&amp; $dir$fileNameWithoutExt&quot;,</span><br><span class="line">        &#x2F;&#x2F;&quot;cpp&quot;: &quot;cd $dir &amp;&amp; clang++ $fileName -o $fileNameWithoutExt.out -g -Wall -static-libgcc -fcolor-diagnostics -std&#x3D;c++14 &amp;&amp; $dir$fileNameWithoutExt&quot;</span><br><span class="line">        &#125;, &#x2F;&#x2F; 设置code runner的命令行</span><br><span class="line">    &quot;code-runner.saveFileBeforeRun&quot;: true, &#x2F;&#x2F; run code前保存</span><br><span class="line">    &quot;code-runner.preserveFocus&quot;: true, &#x2F;&#x2F; 若为false，run code后光标会聚焦到终端上。如果需要频繁输入数据可设为false</span><br><span class="line">    &quot;code-runner.clearPreviousOutput&quot;: false, &#x2F;&#x2F; 每次run code前清空属于code runner的终端消息</span><br><span class="line"> </span><br><span class="line">    &quot;C_Cpp.clang_format_sortIncludes&quot;: true, &#x2F;&#x2F; 格式化时调整include的顺序（按字母排序）</span><br><span class="line">    &quot;C_Cpp.intelliSenseEngine&quot;: &quot;Default&quot;, &#x2F;&#x2F; 可以为Default或Tag Parser，后者较老，功能较简单。具体差别参考cpptools插件文档</span><br><span class="line">    &quot;C_Cpp.errorSquiggles&quot;: &quot;Disabled&quot;, &#x2F;&#x2F; 因为有clang的lint，所以关掉</span><br><span class="line">    &quot;editor.formatOnType&quot;: false, &#x2F;&#x2F; 输入时就进行格式化，默认触发字符较少，分号可以触发</span><br><span class="line">    &quot;editor.snippetSuggestions&quot;: &quot;top&quot;, &#x2F;&#x2F; snippets代码优先显示补全</span><br><span class="line"> </span><br><span class="line">    &quot;clang.cflags&quot;: [ &#x2F;&#x2F; 控制c语言静态检测的参数</span><br><span class="line">        &#x2F;&#x2F;&quot;--target&#x3D;x86_64-w64-mingw&quot;,</span><br><span class="line">        &quot;-std&#x3D;c11&quot;,</span><br><span class="line">        &quot;-Wall&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;clang.cxxflags&quot;: [ &#x2F;&#x2F; 控制c++静态检测时的参数</span><br><span class="line">        &#x2F;&#x2F;&quot;--target&#x3D;x86_64-w64-mingw&quot;,</span><br><span class="line">        &quot;-std&#x3D;c++14&quot;,</span><br><span class="line">        &quot;-Wall&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;editor.fontSize&quot;: 20,</span><br><span class="line">    &#x2F;&#x2F;&quot;clang.completion.enable&quot;:false &#x2F;&#x2F; 效果稍好，但太卡，故关掉</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们在保存之后再运行原来的程序（就是点右上方的<del>播放键</del>），是不是发现在下面的控制台里面就输出hello world了？</p>
<p>我们的deepin入门就讲到这里，如果还有什么问题，就可以私信我，或者可以<del>自行百度</del></p>
]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵那些事</title>
    <url>/2019/02/26/ju-zhen-na-xie-shi/</url>
    <content><![CDATA[<h1 id="其实矩阵是一个非常有意思的东西呢"><a href="#其实矩阵是一个非常有意思的东西呢" class="headerlink" title="其实矩阵是一个非常有意思的东西呢"></a>其实矩阵是一个非常有意思的东西呢</h1><h2 id="矩阵在各个领域都能用到，而且非常方便呢"><a href="#矩阵在各个领域都能用到，而且非常方便呢" class="headerlink" title="矩阵在各个领域都能用到，而且非常方便呢"></a>矩阵在各个领域都能用到，而且非常方便呢</h2><h3 id="那么，矩阵长什么样呢"><a href="#那么，矩阵长什么样呢" class="headerlink" title="那么，矩阵长什么样呢"></a>那么，矩阵长什么样呢</h3><h4 id="大体长这个样："><a href="#大体长这个样：" class="headerlink" title="大体长这个样："></a>大体长这个样：</h4><p>$\begin{bmatrix}a_{1,1}&amp;a_{1,2}&amp;a_{1,3}&amp;\cdots\\a_{2,1}&amp;a_{2,2}&amp;a_{2,3}&amp;\cdots\\a_{3,1}&amp;a_{3,2}&amp;a_{3,3}&amp;\cdots\\\vdots&amp;\vdots&amp;\vdots\end{bmatrix}$ </p>
<a id="more"></a>
<h5 id="当然，矩阵并不一定必须要是方阵"><a href="#当然，矩阵并不一定必须要是方阵" class="headerlink" title="当然，矩阵并不一定必须要是方阵"></a>当然，矩阵并不一定必须要是方阵</h5><h4 id="那么，矩阵怎么运算？"><a href="#那么，矩阵怎么运算？" class="headerlink" title="那么，矩阵怎么运算？"></a>那么，矩阵怎么运算？</h4><p>其实矩阵的运算也挺简单的：</p>
<p>比如说：</p>
<p>$\begin{bmatrix}10&amp;7\\6&amp;4\end{bmatrix}$ $+$ $\begin{bmatrix}6&amp;1\\8&amp;-3\end{bmatrix}$ $=$ $\begin{bmatrix}16&amp;8\\14&amp;1\end{bmatrix}$</p>
<p>挺好看出来的吧？其实就是每个位置相对应的数相加就行了</p>
<p>减法也跟加法一样</p>
<p>矩阵乘法是跟加减不一样的，而乘法才是矩阵运算的核心</p>
<p>我们同样来看上一个栗子：</p>
<p>$\begin{bmatrix}10&amp;7\\6&amp;4\end{bmatrix}$ $\times$ $\begin{bmatrix}6&amp;1\\8&amp;-3\end{bmatrix}$ $=$<br>$\begin{bmatrix}116&amp;-11\\68&amp;-6\end{bmatrix}$</p>
<p>是不是跟上面的加减法很不一样呢</p>
<p>我们来仔细看一下这个式子：<br>$\begin{bmatrix}10&amp;7\\6&amp;4\end{bmatrix}$ $\times$ $\begin{bmatrix}6&amp;1\\8&amp;-3\end{bmatrix}$ $=$<br>$\begin{bmatrix}10\times6+7\times8&amp;10\times1+7\times-3\\6\times6+4\times8&amp;6\times1+4\times-3\end{bmatrix}$ $=$<br>$\begin{bmatrix}116&amp;-11\\68&amp;-6\end{bmatrix}$</p>
<p>如果我们设矩阵$A,B,C$且$A\times B=C$,<br>我们能看出来，矩阵乘法的原理是$A$的横行$\times$$B$的纵行的总和</p>
<h4 id="注：在实际应用中只会应用到矩阵的方阵，所以我们下面提到的矩阵都是方阵"><a href="#注：在实际应用中只会应用到矩阵的方阵，所以我们下面提到的矩阵都是方阵" class="headerlink" title="注：在实际应用中只会应用到矩阵的方阵，所以我们下面提到的矩阵都是方阵"></a>注：在实际应用中只会应用到矩阵的方阵，所以我们下面提到的矩阵都是方阵</h4><p>代码实现也很简单（方阵）：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line">                c.m[i][j]=c.m[i][j]+a.m[i][k]*b.m[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>我们也可以用数组存矩阵，但是那样用有局限性，这个在后面会提到</p>
<p>矩阵有几个特性，它支持结合律，所以它的乘法运算跟别的乘法运算差不多</p>
<p>说到这里，矩阵到底有什么用呢？</p>
<p>我们来看一下斐波那契数列：<br>$f(n)=f(n-1)+f(n-2)$</p>
<p>这个式子很简单，只要递推一下就可以了</p>
<p><strong>但是！</strong> 如果我们要求第2000000000项，那么不用说，我们肯定会被卡得怀疑人生</p>
<p>这时候，矩阵就派上用场了</p>
<p>首先，$f_i=f_{i-1}+f_{i-2}=f_{i-1}\times1+f_{i-2}\times1$</p>
<p>而$f_{i-1}=f_{i-1}\times1+f_{i-2}\times1$</p>
<p>$\therefore\begin{bmatrix}f_{i}&amp;0\\f_{i-1}&amp;0\end{bmatrix}=\begin{bmatrix}1&amp;1\\1&amp;0\end{bmatrix}\times\begin{bmatrix}f_{i-1}&amp;0\\f_{i-2}&amp;0\end{bmatrix}$</p>
<p>而$\begin{bmatrix}f_{i-1}&amp;0\\f_{i-2}&amp;0\end{bmatrix}=\begin{bmatrix}1&amp;1\\1&amp;0\end{bmatrix}\times\begin{bmatrix}f_{i-2}&amp;0\\f_{i-3}&amp;0\end{bmatrix}$</p>
<p>即$\begin{bmatrix}f_{i}&amp;0\\f_{i-1}&amp;0\end{bmatrix}=\begin{bmatrix}1&amp;1\\1&amp;0\end{bmatrix}^2\times\begin{bmatrix}f_{i-2}&amp;0\\f_{i-3}&amp;0\end{bmatrix}$</p>
<p>最终，我们能推出$\begin{bmatrix}f_{i}&amp;0\\f_{i-1}&amp;0\end{bmatrix}=\begin{bmatrix}1&amp;1\\1&amp;0\end{bmatrix}^{i-2}\times\begin{bmatrix}f_{2}&amp;0\\f_{1}&amp;0\end{bmatrix}=\begin{bmatrix}1&amp;1\\1&amp;0\end{bmatrix}^{i-2}\times\begin{bmatrix}1&amp;0\\1&amp;0\end{bmatrix}$</p>
<p>这样的话能比普通的递推式快很多很多很多，因为我们求矩阵快速幂是很快的</p>
<h3 id="那么，矩阵快速幂怎么求？"><a href="#那么，矩阵快速幂怎么求？" class="headerlink" title="那么，矩阵快速幂怎么求？"></a>那么，矩阵快速幂怎么求？</h3><p>上面我说过，矩阵满足结合律，所以矩阵快速幂跟普通快速幂几乎一模一样，只是把乘法改成矩阵乘法而已</p>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line">ll n,p;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mat</span>&#123;</span></span><br><span class="line">    ll m[<span class="number">101</span>][<span class="number">101</span>];<span class="comment">//存储矩阵的结构体数组</span></span><br><span class="line">&#125;;</span><br><span class="line">Mat a,e;</span><br><span class="line"><span class="function">Mat <span class="title">Mul</span><span class="params">(Mat x,Mat y)</span></span>&#123;<span class="comment">//矩阵乘法</span></span><br><span class="line">    Mat c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//对于结构体我们不能使用memset</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            c.m[i][j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line">                c.m[i][j]=c.m[i][j]%mod+x.m[i][k]*y.m[k][j]%mod;<span class="comment">//核心代码</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Mat <span class="title">MatPow</span><span class="params">(Mat x,ll y)</span></span>&#123;<span class="comment">//矩阵快速幂，可以发现除了乘法被换成Mat以外基本跟快速幂没有什么区别</span></span><br><span class="line">    Mat ans=e;</span><br><span class="line">    <span class="keyword">while</span>(y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(y&amp;<span class="number">1</span>)&#123;</span><br><span class="line">            ans=Mul(ans,x);</span><br><span class="line">        &#125;</span><br><span class="line">        x=Mul(x,x);</span><br><span class="line">        y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;p);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a.m[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//单位矩阵，这个相当于1，对角线都是1，其他的是0，其他矩阵乘以这个矩阵本身的值不变</span></span><br><span class="line">        e.m[i][i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mat ans=MatPow(a,p);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld "</span>,ans.m[i][j]%mod);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>从中我们就可以看到开结构体的优越性，而且我们开数组存矩阵的话根本就没办法进行运算</p>
<p>那么，我们的斐波那契数列就可以写出来了：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">ll n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mat</span>&#123;</span></span><br><span class="line">    ll m[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">&#125;;</span><br><span class="line">Mat a,e;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Mat <span class="title">Mul</span><span class="params">(Mat x,Mat y)</span></span>&#123;</span><br><span class="line">    Mat c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)&#123;</span><br><span class="line">            c.m[i][j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">3</span>;k++)&#123;</span><br><span class="line">                c.m[i][j]=c.m[i][j]%mod+x.m[i][k]*y.m[k][j]%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Mat <span class="title">Matpow</span><span class="params">(Mat x,ll y)</span></span>&#123;</span><br><span class="line">    Mat ans=e;</span><br><span class="line">    <span class="keyword">while</span>(y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(y&amp;<span class="number">1</span>)&#123;</span><br><span class="line">            ans=Mul(ans,x);</span><br><span class="line">        &#125;</span><br><span class="line">        x=Mul(x,x);</span><br><span class="line">        y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">Mat aans;</span><br><span class="line">Mat d;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    e.m[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    e.m[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//e.m[3][3]=1;</span></span><br><span class="line">    a.m[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    a.m[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//a.m[3][1]=1;</span></span><br><span class="line">    d.m[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    d.m[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//d.m[3][2]=1;</span></span><br><span class="line">    d.m[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf("%d",&amp;t);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    aans=Mul(Matpow(d,n<span class="number">-2</span>),a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,aans.m[<span class="number">1</span>][<span class="number">1</span>]%mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>也就是<a href="https://www.luogu.org/problem/P1962" target="_blank" rel="noopener">这道题</a></p>
<p>那么，如果只这样呢？</p>
<p>$f(1)=f(2)=f(3)=1$<br>$f(n)=f(n-1)+f(n-3)$</p>
<p>我们可以这么推：<br>首先，$f_i=f_{i-1}+f_{i-3}=f_{i-1}\times1+f_{i-2}\times0+f_{i-3}\times1$<br>$f_{i-1}=f_{i-1}\times1+f_{i-2}\times0+f_{i-3}\times1$<br>$f_{i-2}=f_{i-1}\times0+f_{i-2}\times1+f_{i-3}\times0$</p>
<p>$\therefore\begin{bmatrix}f_{i}&amp;0&amp;0\\f_{i-1}&amp;0&amp;0\\f_{i-2}&amp;0&amp;0\end{bmatrix}=\begin{bmatrix}1&amp;0&amp;1\\1&amp;0&amp;0\\0&amp;1&amp;0\end{bmatrix}\times\begin{bmatrix}f_{i-1}&amp;0&amp;0\\f_{i-2}&amp;0&amp;0\\f_{i-3}&amp;0&amp;0\end{bmatrix}$</p>
<p>而$\begin{bmatrix}f_{i-1}&amp;0&amp;0\\f_{i-2}&amp;0&amp;0\\f_{i-3}&amp;0&amp;0\end{bmatrix}=\begin{bmatrix}1&amp;0&amp;1\\1&amp;0&amp;0\\0&amp;1&amp;0\end{bmatrix}\times\begin{bmatrix}f_{i-2}&amp;0&amp;0\\f_{i-3}&amp;0&amp;0\\f_{i-4}&amp;0&amp;0\end{bmatrix}$</p>
<p>即$\begin{bmatrix}f_{i}&amp;0&amp;0\\f_{i-1}&amp;0&amp;0\\f_{i-2}&amp;0&amp;0\end{bmatrix}=\begin{bmatrix}1&amp;0&amp;1\\1&amp;0&amp;0\\0&amp;1&amp;0\end{bmatrix}^2\times\begin{bmatrix}f_{i-2}&amp;0&amp;0\\f_{i-3}&amp;0&amp;0\\f_{i-4}&amp;0&amp;0\end{bmatrix}$</p>
<p>最终，我们能推出$\begin{bmatrix}f_{i}&amp;0&amp;0\\f_{i-1}&amp;0&amp;0\\f_{i-2}&amp;0&amp;0\end{bmatrix}=\begin{bmatrix}1&amp;0&amp;1\\1&amp;0&amp;0\\0&amp;1&amp;0\end{bmatrix}^{i-3}\times\begin{bmatrix}f_{3}&amp;0&amp;0\\f_{2}&amp;0&amp;0\\f_{1}&amp;0&amp;0\end{bmatrix}=\begin{bmatrix}1&amp;0&amp;1\\1&amp;0&amp;0\\0&amp;1&amp;0\end{bmatrix}^{i-3}\times\begin{bmatrix}1&amp;0&amp;0\\1&amp;0&amp;0\\1&amp;0&amp;0\end{bmatrix}$</p>
<p>所以这样我们就可以得出结果了</p>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mat</span>&#123;</span></span><br><span class="line">    ll m[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">&#125;;</span><br><span class="line">Mat a,e;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Mat <span class="title">Mul</span><span class="params">(Mat x,Mat y)</span></span>&#123;</span><br><span class="line">    Mat c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)&#123;</span><br><span class="line">            c.m[i][j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">3</span>;k++)&#123;</span><br><span class="line">                c.m[i][j]=c.m[i][j]%mod+x.m[i][k]*y.m[k][j]%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Mat <span class="title">Matpow</span><span class="params">(Mat x,ll y)</span></span>&#123;</span><br><span class="line">    Mat ans=e;</span><br><span class="line">    <span class="keyword">while</span>(y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(y&amp;<span class="number">1</span>)&#123;</span><br><span class="line">            ans=Mul(ans,x);</span><br><span class="line">        &#125;</span><br><span class="line">        x=Mul(x,x);</span><br><span class="line">        y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">Mat aans;</span><br><span class="line">Mat d;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    e.m[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    e.m[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    e.m[<span class="number">3</span>][<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line">    a.m[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    a.m[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    a.m[<span class="number">3</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    d.m[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    d.m[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    d.m[<span class="number">3</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    d.m[<span class="number">1</span>][<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        aans=Mul(Matpow(d,n<span class="number">-3</span>),a);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,aans.m[<span class="number">1</span>][<span class="number">1</span>]%mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>也就是<a href="https://www.luogu.org/problem/P1939" target="_blank" rel="noopener">这道题</a></p>
<p>终于讲完啦！</p>
]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈线段树和树状数组</title>
    <url>/2019/02/26/qian-tan-shu-zhuang-shu-zu-he-xian-duan-shu/</url>
    <content><![CDATA[<h1 id="我们来讲讲树状数组和线段树的原理和应用"><a href="#我们来讲讲树状数组和线段树的原理和应用" class="headerlink" title="我们来讲讲树状数组和线段树的原理和应用"></a>我们来讲讲树状数组和线段树的原理和应用</h1><h2 id="那么，这有个问题："><a href="#那么，这有个问题：" class="headerlink" title="那么，这有个问题："></a>那么，这有个问题：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如题，已知一个数列，你需要进行下面两种操作：</span><br><span class="line"></span><br><span class="line">1.将某一个数加上x</span><br><span class="line"></span><br><span class="line">2.求出某区间每一个数的和</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="那么，如果是一般人，就会拿一维数组存储区间。当然，一维数组可以做到O-1-的修改，但是，区间查询的复杂度会高达O-y-x-！（我们要查询x，y的区间和）"><a href="#那么，如果是一般人，就会拿一维数组存储区间。当然，一维数组可以做到O-1-的修改，但是，区间查询的复杂度会高达O-y-x-！（我们要查询x，y的区间和）" class="headerlink" title="那么，如果是一般人，就会拿一维数组存储区间。当然，一维数组可以做到O(1)的修改，但是，区间查询的复杂度会高达O(y-x)！（我们要查询x，y的区间和）"></a>那么，如果是一般人，就会拿一维数组存储区间。当然，一维数组可以做到O(1)的修改，但是，区间查询的复杂度会高达O(y-x)！（我们要查询x，y的区间和）</h4><h3 id="所以，我们这个时候要用到树状数组"><a href="#所以，我们这个时候要用到树状数组" class="headerlink" title="所以，我们这个时候要用到树状数组"></a>所以，我们这个时候要用到树状数组</h3><h4 id="那么，什么是树状数组呢？我们给个图感性理解一下"><a href="#那么，什么是树状数组呢？我们给个图感性理解一下" class="headerlink" title="那么，什么是树状数组呢？我们给个图感性理解一下:"></a>那么，什么是树状数组呢？我们给个图感性理解一下:</h4><p><img src="https://i.loli.net/2019/02/26/5c74c56ce2226.jpg" alt="0dd7912397dda14482d369acbfb7d0a20df486d1.jpg"><br>我们每次输入a[]，然后c数组就会存储一个或多个a数组的和，所以就可以轻松做到区间查询</p>
<p>可以看出，这里是有个规律的<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">c[<span class="number">1</span>]=a[<span class="number">1</span>]</span><br><span class="line">c[<span class="number">2</span>]=a[<span class="number">1</span>]+a[<span class="number">2</span>]</span><br><span class="line">c[<span class="number">3</span>]=a[<span class="number">3</span>]</span><br><span class="line">c[<span class="number">4</span>]=a[<span class="number">1</span>]+a[<span class="number">2</span>]+a[<span class="number">3</span>]+a[<span class="number">4</span>]</span><br><span class="line">c[<span class="number">5</span>]=a[<span class="number">5</span>]</span><br><span class="line">c[<span class="number">6</span>]=a[<span class="number">5</span>]+a[<span class="number">6</span>]</span><br><span class="line">c[<span class="number">7</span>]=a[<span class="number">7</span>]</span><br><span class="line">c[<span class="number">8</span>]=a[<span class="number">1</span>]+a[<span class="number">2</span>]+a[<span class="number">3</span>]+a[<span class="number">4</span>]+a[<span class="number">5</span>]+a[<span class="number">6</span>]+a[<span class="number">7</span>]+a[<span class="number">8</span>]</span><br></pre></td></tr></table></figure><br>那么，这里有个有意思的性质，也就是这个隐藏的规律：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>&amp;<span class="number">-1</span>=<span class="number">001</span>&amp;<span class="number">111</span>=<span class="number">001</span>=<span class="number">1</span></span><br><span class="line"><span class="number">2</span>&amp;<span class="number">-2</span>=<span class="number">010</span>&amp;<span class="number">110</span>=<span class="number">010</span>=<span class="number">2</span></span><br><span class="line"><span class="number">3</span>&amp;<span class="number">-3</span>=<span class="number">011</span>&amp;<span class="number">101</span>=<span class="number">001</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<h4 id="显然，这里c数组与a数组的存储关系可以用二进制表示，所以我们就可以写一个-lowbit"><a href="#显然，这里c数组与a数组的存储关系可以用二进制表示，所以我们就可以写一个-lowbit" class="headerlink" title="显然，这里c数组与a数组的存储关系可以用二进制表示，所以我们就可以写一个$lowbit$"></a>显然，这里c数组与a数组的存储关系可以用二进制表示，所以我们就可以写一个$lowbit$</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//inline只是个常数优化而已，不加也行</span></span><br><span class="line">	<span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们就要区间修改，那么，我们先一步一步想：</p>
<p>a[1]会被c[1],c[2],c[4],c[8]几个点储存，我们可以看出，除了c[1]之外，都满足$2^n$且$n\ge 1$</p>
<p>也就是说，除了第一个数组以外，都是2的n次方</p>
<p>我们继续往下分析，都可以得到这个结论</p>
<p>那么，我们就可以这么写：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//v表示在这个数在区间的位置，x表示这个数</span></span><br><span class="line">    <span class="keyword">while</span>(v&lt;=n)&#123;</span><br><span class="line">        c[v]+=x;<span class="comment">//每个跟a[v]的数有关系的c数组都加上x</span></span><br><span class="line">        v+=lowbit(v);<span class="comment">//访问下一个跟a[v]有关系的c数组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后我们就完成了树状数组的构造啦！</p>
<h3 id="最后，还有一个问题：怎么进行区间查询？"><a href="#最后，还有一个问题：怎么进行区间查询？" class="headerlink" title="最后，还有一个问题：怎么进行区间查询？"></a>最后，还有一个问题：怎么进行区间查询？</h3><p>那么，想一下朴素的前缀和做法的区间和怎么求</p>
<p>是不是要定义一个数组sum，然后可以求出sum[n]=a[1]+a[2]+……+a[n]<br>(注意：这里前缀和是求1-n的区间和)</p>
<p>那么，我们可以发现：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sum[<span class="number">1</span>]=a[<span class="number">1</span>]</span><br><span class="line">sum[<span class="number">2</span>]=a[<span class="number">1</span>]+a[<span class="number">2</span>]</span><br><span class="line">sum[<span class="number">3</span>]=a[<span class="number">1</span>]+a[<span class="number">2</span>]+a[<span class="number">3</span>]</span><br><span class="line">sum[<span class="number">4</span>]=a[<span class="number">1</span>]+a[<span class="number">2</span>]+a[<span class="number">3</span>]+a[<span class="number">4</span>]</span><br><span class="line">c[<span class="number">1</span>]=a[<span class="number">1</span>]</span><br><span class="line">c[<span class="number">2</span>]=a[<span class="number">1</span>]+a[<span class="number">2</span>]</span><br><span class="line">c[<span class="number">3</span>]=a[<span class="number">3</span>]</span><br><span class="line">c[<span class="number">4</span>]=a[<span class="number">1</span>]+a[<span class="number">2</span>]+a[<span class="number">3</span>]+a[<span class="number">4</span>]</span><br></pre></td></tr></table></figure><br>然后经过<del>显然</del>分析之后，我们可以发现：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sum[<span class="number">1</span>]=c[<span class="number">1</span>]</span><br><span class="line">sum[<span class="number">2</span>]=c[<span class="number">2</span>]</span><br><span class="line">sum[<span class="number">3</span>]=c[<span class="number">3</span>]+c[<span class="number">2</span>]</span><br><span class="line">sum[<span class="number">4</span>]=c[<span class="number">4</span>]</span><br></pre></td></tr></table></figure></p>
<ul>
<li>这里的$=$是计算机意义上的$==$</li>
</ul>
<p>然后，我们继续发现：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sum[<span class="number">1</span>]=c[<span class="number">1</span>]+c[<span class="number">0</span>]</span><br><span class="line">sum[<span class="number">2</span>]=c[<span class="number">2</span>]+c[<span class="number">0</span>]</span><br><span class="line">sum[<span class="number">3</span>]=c[<span class="number">3</span>]+c[<span class="number">2</span>]</span><br><span class="line">sum[<span class="number">4</span>]=c[<span class="number">4</span>]+c[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><br>也就是：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sum[<span class="number">1</span>]==[<span class="number">1</span>]+c[<span class="number">1</span>-lowbit(<span class="number">1</span>)]</span><br><span class="line">sum[<span class="number">2</span>]=c[<span class="number">2</span>]+c[<span class="number">2</span>-lowbit(<span class="number">2</span>)]</span><br><span class="line">sum[<span class="number">3</span>]=c[<span class="number">3</span>]+c[<span class="number">3</span>-lowbit(<span class="number">3</span>)]</span><br><span class="line">sum[<span class="number">4</span>]=c[<span class="number">4</span>]+c[<span class="number">4</span>-lowbit(<span class="number">4</span>)]</span><br></pre></td></tr></table></figure><br>所以我们就可以写出区间查询的操作啦！</p>
<h4 id="注意：树状数组的区间查询只能做到1到n的区间和，所以当我们要查询x到y的的区间和的时候要先求出1到y的区间和，再减去1到x-1的区间和-到x-1是因为要包括x"><a href="#注意：树状数组的区间查询只能做到1到n的区间和，所以当我们要查询x到y的的区间和的时候要先求出1到y的区间和，再减去1到x-1的区间和-到x-1是因为要包括x" class="headerlink" title="注意：树状数组的区间查询只能做到1到n的区间和，所以当我们要查询x到y的的区间和的时候要先求出1到y的区间和，再减去1到x-1的区间和(到x-1是因为要包括x)"></a>注意：树状数组的区间查询只能做到1到n的区间和，所以当我们要查询x到y的的区间和的时候要先求出1到y的区间和，再减去1到x-1的区间和(到x-1是因为要包括x)</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getans</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        ans+=c[x];<span class="comment">//ans从x加到1</span></span><br><span class="line">        x-=lowbit(x);<span class="comment">//访问下一个c数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="这样，我们的树状数组就结束啦"><a href="#这样，我们的树状数组就结束啦" class="headerlink" title="这样，我们的树状数组就结束啦"></a>这样，我们的树状数组就结束啦</h3><h4 id="其实，树状数组的代码很简单，就是理解起来很吃力，我们完全可以背代码"><a href="#其实，树状数组的代码很简单，就是理解起来很吃力，我们完全可以背代码" class="headerlink" title="其实，树状数组的代码很简单，就是理解起来很吃力，我们完全可以背代码"></a>其实，树状数组的代码很简单，就是理解起来很吃力，<del>我们完全可以背代码</del></h4><h4 id="树状数组其实不好讲，很多人可能看了我写的还是有点懵，可以先跟着写一下代码，自己慢慢理解"><a href="#树状数组其实不好讲，很多人可能看了我写的还是有点懵，可以先跟着写一下代码，自己慢慢理解" class="headerlink" title="树状数组其实不好讲，很多人可能看了我写的还是有点懵，可以先跟着写一下代码，自己慢慢理解"></a>树状数组其实不好讲，很多人可能看了我写的还是有点懵，可以先跟着写一下代码，自己慢慢理解</h4><p>给你们模版：<a href="https://www.luogu.org/problemnew/show/P3374" target="_blank" rel="noopener">树状数组</a></p>
<p>再给一下<del>高清无码</del>的代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">1000001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(v&lt;=n)&#123;</span><br><span class="line">        c[v]+=x;</span><br><span class="line">        v+=lowbit(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getans</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        ans+=c[x];</span><br><span class="line">        x-=lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">        change(i,a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> k,a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;k,&amp;a,&amp;b);</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>)&#123;</span><br><span class="line">            change(a,b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,getans(b)-getans(a<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="树状数组还能用差分做到区间修改-一段区间加上一个数-和单点查询-查询一个点的值"><a href="#树状数组还能用差分做到区间修改-一段区间加上一个数-和单点查询-查询一个点的值" class="headerlink" title="树状数组还能用差分做到区间修改(一段区间加上一个数)和单点查询(查询一个点的值)"></a>树状数组还能用差分做到区间修改(一段区间加上一个数)和单点查询(查询一个点的值)</h5><hr>
<h2 id="说完树状数组，我们再来谈谈线段树"><a href="#说完树状数组，我们再来谈谈线段树" class="headerlink" title="说完树状数组，我们再来谈谈线段树"></a>说完树状数组，我们再来谈谈线段树</h2><h3 id="先说线段树的用途："><a href="#先说线段树的用途：" class="headerlink" title="先说线段树的用途："></a>先说线段树的用途：</h3><h4 id="线段树是一个支持区间修改，区间查询的强大的数据结构。虽然那两个树状数组也可以做到，但是代码实现却比较麻烦"><a href="#线段树是一个支持区间修改，区间查询的强大的数据结构。虽然那两个树状数组也可以做到，但是代码实现却比较麻烦" class="headerlink" title="线段树是一个支持区间修改，区间查询的强大的数据结构。虽然那两个树状数组也可以做到，但是代码实现却比较麻烦"></a>线段树是一个支持区间修改，区间查询的强大的数据结构。虽然那两个树状数组也可以做到，但是代码实现却比较麻烦</h4><h4 id="树状数组是不好理解，代码好写；反之，线段树是好理解，代码不好写"><a href="#树状数组是不好理解，代码好写；反之，线段树是好理解，代码不好写" class="headerlink" title="树状数组是不好理解，代码好写；反之，线段树是好理解，代码不好写"></a>树状数组是不好理解，代码好写；反之，线段树是好理解，代码不好写</h4><p>线段树的复杂度比树状数组能高一点点，所以在下面的代码中，我会带一点位运算和一些常数优化的<del>骚</del>操作</p>
<p>那么，线段树长什么样子，<del>好吃吗？</del></p>
<p>这个就是线段树：<br><img src="https://i.loli.net/2019/02/26/5c7535de69064.jpg" alt="u=1577236179,2299906822&amp;fm=26&amp;gp=0.jpg"></p>
<p>这个是存储1-10区间的线段树</p>
<p>我们可以发现，线段树是个二叉树，所以它有二叉树的性质，左儿子的编号是$x<em>2$，右儿子的编号是$x</em>2+1$</p>
<p>所以我们可以写出以下代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ls</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x&lt;&lt;<span class="number">1</span>;<span class="comment">//在这里x&lt;&lt;1等于x*2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;<span class="comment">//在这里x&lt;&lt;1|1相当于x*2+1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在这里，给大家科普一下：每左移一位就是乘上2，每右移一位就是/2，然后在上面|1就相当于+1</p>
<p><strong>注：inline 可以加在非递归函数前面，可以防止无效数据进入，在递归函数中inline无效，而且可能会报错</strong></p>
<h3 id="那么，线段树是怎么储存的呢？"><a href="#那么，线段树是怎么储存的呢？" class="headerlink" title="那么，线段树是怎么储存的呢？"></a>那么，线段树是怎么储存的呢？</h3><h4 id="线段树主要运用二分的思想。因为是二叉树，所以-除非没有子节点，每个节点都有两个子节点。所以，每一个区间都可以是被二分的形式储存。比如，一个储存1-4区间和的节点的两个子节点就会分别储存1-2，2-4"><a href="#线段树主要运用二分的思想。因为是二叉树，所以-除非没有子节点，每个节点都有两个子节点。所以，每一个区间都可以是被二分的形式储存。比如，一个储存1-4区间和的节点的两个子节点就会分别储存1-2，2-4" class="headerlink" title="线段树主要运用二分的思想。因为是二叉树，所以,除非没有子节点，每个节点都有两个子节点。所以，每一个区间都可以是被二分的形式储存。比如，一个储存1-4区间和的节点的两个子节点就会分别储存1-2，2-4"></a>线段树主要运用二分的思想。因为是二叉树，所以,除非没有子节点，每个节点都有两个子节点。所以，每一个区间都可以是被二分的形式储存。比如，一个储存1-4区间和的节点的两个子节点就会分别储存1-2，2-4</h4><p>先看一张线段树的节点关系图：</p>
<p><img src="https://i.loli.net/2019/02/27/5c767db97cf7f.png" alt="QQ图片20190227200754.png"></p>
<p>这个图很好理解，然后我们就可以发现一个逻辑关系：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">tree[<span class="number">1</span>]=tree[<span class="number">2</span>]+tree[<span class="number">3</span>]<span class="comment">//说明：tree[1]存储1-10，tree[2]存储1-5，tree[3]存储6-10，所以tree[1]就可以看作是存储tree[2]+tree[3]</span></span><br><span class="line">tree[<span class="number">2</span>]=tree[<span class="number">4</span>]+tree[<span class="number">5</span>]</span><br><span class="line">tree[<span class="number">3</span>]=tree[<span class="number">6</span>]+tree[<span class="number">7</span>]</span><br><span class="line">···</span><br></pre></td></tr></table></figure><br>这个储存的规律也是很明显了，就是：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    ans[x]=ans[ls(x)]+ans[rs(x)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//个人习惯，下面的tree都用ans替代</span></span><br></pre></td></tr></table></figure>
<p>那么，我们写这个函数是为了以后的建树和区间修改操作都维持一个逻辑关系，就是父节点等于两个子节点的和，还告诉我们父节点维护的区间和是它的左儿子和右儿子维护的区间的总区间，不过这个逻辑关系也可以是子节点的最小值等(具体看题目的要求)</p>
<h4 id="那么我们就开始建树："><a href="#那么我们就开始建树：" class="headerlink" title="那么我们就开始建树："></a>那么我们就开始建树：</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        ans[x]=a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(ls(x),l,mid);</span><br><span class="line">    build(rs(x),mid+<span class="number">1</span>,r);</span><br><span class="line">    push_up(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么，很多人应该会问：$l==r$的一系列语句是干什么的</p>
<p>答：因为整个建树操作是以二分的方式进行的，那么<br><img src="https://i.loli.net/2019/02/26/5c7535de69064.jpg" alt="u=1577236179,2299906822&amp;fm=26&amp;gp=0.jpg"></p>
<p>这个图已经很清楚了，我们可以看到在那些没有子节点的节点上只储存了一个单点，也就是相当于储存了一个区间，且左边界=右边界。所以我们就可以判断，如果一个节点的左右边界相等，也就是说明已经二分到一个数了，这个节点没有子节点，那么ans数组就存储a数组，在上面$ans[x]=a[l]$是存储l边界的数，其实储存$a[r]$也可以，因为$l==r$</p>
<p>那么，建树应该就没什么问题了吧？毕竟这个很好理解</p>
<h4 id="建树之后就是区间修改"><a href="#建树之后就是区间修改" class="headerlink" title="建树之后就是区间修改"></a>建树之后就是区间修改</h4><p>在这里我就不讲单点修改了，因为这个树状数组就可以做到了，没有必要在线段树里面实现</p>
<h3 id="那么，这里我们就要引入一个概念——懒标记"><a href="#那么，这里我们就要引入一个概念——懒标记" class="headerlink" title="那么，这里我们就要引入一个概念——懒标记"></a>那么，这里我们就要引入一个概念——懒标记</h3><p>那么，我们修改线段树是从上而下修改的，如果我们把需要修改的节点全都标记上去，那么复杂度会增大，线段树的优势就荡然无存，所以我们就要用到懒标</p>
<h4 id="懒标记的作用是记录每次、每个节点要更新的值，也就是-delta-但线段树的优点不在于全记录（全记录依然很慢qwq），而在于传递式记录："><a href="#懒标记的作用是记录每次、每个节点要更新的值，也就是-delta-但线段树的优点不在于全记录（全记录依然很慢qwq），而在于传递式记录：" class="headerlink" title="懒标记的作用是记录每次、每个节点要更新的值，也就是$delta$,但线段树的优点不在于全记录（全记录依然很慢qwq），而在于传递式记录："></a>懒标记的作用是记录每次、每个节点要更新的值，也就是$delta$,但线段树的优点不在于全记录（全记录依然很慢qwq），而在于传递式记录：</h4><h5 id="整个区间都被操作，记录在公共祖先节点上；只修改了一部分，那么就记录在这部分的公共祖先上；如果四环以内只修改了自己的话，那就只改变自己。"><a href="#整个区间都被操作，记录在公共祖先节点上；只修改了一部分，那么就记录在这部分的公共祖先上；如果四环以内只修改了自己的话，那就只改变自己。" class="headerlink" title="整个区间都被操作，记录在公共祖先节点上；只修改了一部分，那么就记录在这部分的公共祖先上；如果四环以内只修改了自己的话，那就只改变自己。"></a>整个区间都被操作，记录在公共祖先节点上；只修改了一部分，那么就记录在这部分的公共祖先上；如果四环以内只修改了自己的话，那就只改变自己。</h5><h5 id="——-皎月半洒花"><a href="#——-皎月半洒花" class="headerlink" title="——_皎月半洒花"></a>——_皎月半洒花</h5><p>引用某大佬的解释，这就是懒标</p>
<p>简单说，就是我们在一个需要更新的节点上打上标记，代表这个节点要加上的数，后面每次访问到这个节点，就把节点往下移一位就行了</p>
<p>对，这就是懒标的运行方式，所以我们就需要把节点的标记等信息往下传，于是我们就可以写出$push_ down$了<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    tag[x]+=k;</span><br><span class="line">    ans[x]+=k*(r-l+<span class="number">1</span>);<span class="comment">//因为是区间的修改，所以ans数组加上k要加区间的长度次</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    f(ls(x),l,mid,tag[x]);</span><br><span class="line">    f(rs(x),mid+<span class="number">1</span>,r,tag[x]);</span><br><span class="line">    tag[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>f函数的目的，其实就是为了记录当前节点所代表的区间，其实我们可以不写f函数，但是那样代码会难看很多，而且写起来很不舒服 </p>
<h3 id="写完懒标，我们就来开始写区间修改"><a href="#写完懒标，我们就来开始写区间修改" class="headerlink" title="写完懒标，我们就来开始写区间修改"></a>写完懒标，我们就来开始写区间修改</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> now_l,<span class="keyword">int</span> now_r,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(now_l&lt;=l&amp;&amp;r&lt;=now_r)&#123;<span class="comment">//如果这个区间完全被覆盖</span></span><br><span class="line">        f(x,l,r,k);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(x,l,r);</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(now_l&lt;=mid)update(now_l,now_r,l,mid,ls(x),k);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;now_r)update(now_l,now_r,mid+<span class="number">1</span>,r,rs(x),k);</span><br><span class="line">    push_up(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么，now_l和now_r是来表示进行修改的区间。我们在往下递归的之前先下传递修改，然后我们回溯之后再用子节点的信息维护父节点</p>
<h3 id="之后呢，我们就来看一下区间查询"><a href="#之后呢，我们就来看一下区间查询" class="headerlink" title="之后呢，我们就来看一下区间查询"></a>之后呢，我们就来看一下区间查询</h3><p>这个查询跟上面一样，都是用到分块的思想，所以思路都差不多<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> ask_l,<span class="keyword">int</span> ask_r,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(ask_l&lt;=l&amp;&amp;r&lt;=ask_r)&#123;<span class="comment">//完全被覆盖就返回此处的值</span></span><br><span class="line">        <span class="keyword">return</span> ans[x];</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(x,l,r);</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ask_l&lt;=mid)res+=query(ask_l,ask_r,l,mid,ls(x));</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;ask_r)res+=query(ask_l,ask_r,mid+<span class="number">1</span>,r,rs(x));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>提示：区间查询是不会修改任何值，所以这里就不需要用到$push_ up$了</p>
<h4 id="那么，我们就写完线段树辣！"><a href="#那么，我们就写完线段树辣！" class="headerlink" title="那么，我们就写完线段树辣！"></a>那么，我们就写完线段树辣！</h4><p>给你们模板<a href="https://www.luogu.org/problemnew/show/P3372" target="_blank" rel="noopener">线段树1</a></p>
<p>再加上代码：<br>(这里的模板要求我们用到long long，所以我就把int都改成了long long)<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">100001</span>;</span><br><span class="line">ll n,m;</span><br><span class="line">ll a[MAXN],tag[MAXN&lt;&lt;<span class="number">2</span>],ans[MAXN&lt;&lt;<span class="number">2</span>];<span class="comment">//这里的ans和tag都开了四倍，可以自己手推，就会发现不开四倍会超空间</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">ls</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;&lt;<span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rs</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_up</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    ans[x]=ans[ls(x)]+ans[rs(x)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(ll x,ll l,ll r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        ans[x]=a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(ls(x),l,mid);</span><br><span class="line">    build(rs(x),mid+<span class="number">1</span>,r);</span><br><span class="line">    push_up(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(ll x,ll l,ll r,ll k)</span></span>&#123;</span><br><span class="line">    tag[x]+=k;</span><br><span class="line">    ans[x]+=k*(r-l+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_down</span><span class="params">(ll x,ll l,ll r)</span></span>&#123;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    f(ls(x),l,mid,tag[x]);</span><br><span class="line">    f(rs(x),mid+<span class="number">1</span>,r,tag[x]);</span><br><span class="line">    tag[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(ll now_l,ll now_r,ll l,ll r,ll x,ll k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(now_l&lt;=l&amp;&amp;r&lt;=now_r)&#123;</span><br><span class="line">        f(x,l,r,k);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(x,l,r);</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(now_l&lt;=mid)update(now_l,now_r,l,mid,ls(x),k);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;now_r)update(now_l,now_r,mid+<span class="number">1</span>,r,rs(x),k);</span><br><span class="line">    push_up(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll ask_l,ll ask_r,ll l,ll r,ll x)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(ask_l&lt;=l&amp;&amp;r&lt;=ask_r)&#123;</span><br><span class="line">        <span class="keyword">return</span> ans[x];</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(x,l,r);</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ask_l&lt;=mid)res+=query(ask_l,ask_r,l,mid,ls(x));</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;ask_r)res+=query(ask_l,ask_r,mid+<span class="number">1</span>,r,rs(x));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c);</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="number">1</span>)&#123;</span><br><span class="line">            ll x,y,k;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;x,&amp;y,&amp;k);</span><br><span class="line">            update(x,y,<span class="number">1</span>,n,<span class="number">1</span>,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="number">2</span>)&#123;</span><br><span class="line">            ll x,y;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;x,&amp;y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query(x,y,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="那么，看完这篇博客是不是还是有点晕呢，线段树和树状数组要多打打代码，熟悉熟悉，时间久了自然而然就会懂了QWQ"><a href="#那么，看完这篇博客是不是还是有点晕呢，线段树和树状数组要多打打代码，熟悉熟悉，时间久了自然而然就会懂了QWQ" class="headerlink" title="那么，看完这篇博客是不是还是有点晕呢，线段树和树状数组要多打打代码，熟悉熟悉，时间久了自然而然就会懂了QWQ"></a>那么，看完这篇博客是不是还是有点晕呢，线段树和树状数组要多打打代码，熟悉熟悉，时间久了自然而然就会懂了QWQ</h4>]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>最小生成树模板</title>
    <url>/2018/12/07/zui-xiao-sheng-cheng-shu-mu-ban/</url>
    <content><![CDATA[<h2 id="这是一篇讲kruskal的题解"><a href="#这是一篇讲kruskal的题解" class="headerlink" title="这是一篇讲kruskal的题解"></a>这是一篇讲kruskal的题解</h2><p>看题解很多大佬只讲kruskal思路，我就来写写整个代码的思路</p>
<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>核心思想不是堆，不是查找，而是sort</p>
<a id="more"></a>
<p>我们可以这么想：因为是最小的路径，所以我们可以排序一下，把节点根据长度从小到达大排序一下</p>
<p>所以，我们先开个结构体来储存节点和边长（开结构体是为了方便sort排序）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> p1,p2,val;<span class="comment">//p1是出发点，p2是目的地，val是路的长度</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>因为是根据节点排序，所以我们可以开个cmp函数<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(node &amp;A,node &amp;B)</span></span>&#123;<span class="comment">//不写取地址符也可以</span></span><br><span class="line">	<span class="keyword">return</span> A.val&lt;B.val;<span class="comment">//保持路径小的在前面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>那么问题来了：怎么不走重复的点呢？</p>
<p>这需要我们的并查集。这里我不多讲并查集了，不会的大佬可以参考<a href="https://www.luogu.org/blog/My-luoguBuoke-HZR/solution-p3367" target="_blank" rel="noopener">这个</a></p>
<p>那么我们就可以写一个find函数，用来合并两个已经走过的点<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(f[k]==k)<span class="keyword">return</span> k;</span><br><span class="line">	<span class="keyword">return</span> f[k]=find(f[k]);<span class="comment">//路径压缩</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后再sort排序，整个代码就成型了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">5001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(f[k]==k)<span class="keyword">return</span> k;</span><br><span class="line">	<span class="keyword">return</span> f[k]=find(f[k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> p1,p2,val;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(node &amp;A,node &amp;B)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> A.val&lt;B.val;</span><br><span class="line">&#125;</span><br><span class="line">node qwq[<span class="number">200001</span>];</span><br><span class="line"><span class="keyword">int</span> ans,cnt;<span class="comment">//cnt是用来判断能不能联通</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;qwq[i].p1,&amp;qwq[i].p2,&amp;qwq[i].val);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5000</span>;i++)f[i]=i;<span class="comment">//初始化</span></span><br><span class="line">	sort(qwq+<span class="number">1</span>,qwq+m+<span class="number">1</span>,cmp);<span class="comment">//sort排序</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(find(qwq[i].p1)!=find(qwq[i].p2))&#123;</span><br><span class="line">			cnt++;</span><br><span class="line">			f[find(qwq[i].p1)]=find(qwq[i].p2);<span class="comment">//合并</span></span><br><span class="line">			ans+=qwq[i].val;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(cnt==n<span class="number">-1</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"orz\n"</span>);<span class="comment">//不能联通就输出orz,但是好像测试点中没有不联通的数据</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷P4995【跳跳】</title>
    <url>/2018/11/05/luogu-p4995-tiao-tiao-tijie/</url>
    <content><![CDATA[<p>这个是洛谷月赛的题呢~</p>
<p>我在打月赛的时候写出的代码，但因为没开long long只得了50分QAQ（不开long long见祖宗）</p>
<a id="more"></a>
<p>这道题我是拿STL堆做的，题目说是每次的体力值最大，而体力值是(hi−hj)2 ，也就是说如果我们在最小的石头上我们就应该往目前最大的石头蹦，如果在最大的石头上就应该往最小的石头上蹦</p>
<p>所以可以开一个大根堆和小根堆维护最大数和最小数，在判断目前是在大石头还是在小石头上，再进行体力值的处理就行了</p>
<p>关于判断位置的方法，我投机取巧地判断了这次跳的次数是奇数还是偶数来判断是在大石头还是小石头上</p>
<p>看代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>&gt;p;<span class="comment">//大根堆</span></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt; &gt;f;<span class="comment">//小根堆</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;<span class="comment">//必须开long long！！！我就是这个比赛才得了50！！！</span></span><br><span class="line"><span class="keyword">int</span> tmp1,tmp2;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">301</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//读入大小根堆</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        p.push(a[i]);</span><br><span class="line">        f.push(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    ans+=<span class="built_in">pow</span>(p.top(),<span class="number">2</span>);<span class="comment">//从地面跳到最大的石头</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//交替相减</span></span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>!=<span class="number">0</span>)&#123;<span class="comment">//从大石头跳到小石头</span></span><br><span class="line">            tmp1=p.top();</span><br><span class="line">            p.pop();</span><br><span class="line">            tmp2=f.top();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;<span class="comment">//从小石头跳到大石头</span></span><br><span class="line">            tmp1=p.top();</span><br><span class="line">            tmp2=f.top();</span><br><span class="line">            f.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=<span class="built_in">pow</span>(tmp1-tmp2,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>洛谷</tag>
        <tag>题解</tag>
      </tags>
  </entry>
</search>
